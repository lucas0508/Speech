package com.example.administrator.speech.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBUSERINFO".
*/
public class DBuserinfoDao extends AbstractDao<DBuserinfo, Long> {

    public static final String TABLENAME = "DBUSERINFO";

    /**
     * Properties of entity DBuserinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsRecoder = new Property(1, int.class, "isRecoder", false, "IS_RECODER");
        public final static Property Audio = new Property(2, String.class, "audio", false, "AUDIO");
        public final static Property AudioText = new Property(3, String.class, "audioText", false, "AUDIO_TEXT");
    }


    public DBuserinfoDao(DaoConfig config) {
        super(config);
    }
    
    public DBuserinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBUSERINFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_RECODER\" INTEGER NOT NULL ," + // 1: isRecoder
                "\"AUDIO\" TEXT," + // 2: audio
                "\"AUDIO_TEXT\" TEXT);"); // 3: audioText
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBUSERINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBuserinfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsRecoder());
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(3, audio);
        }
 
        String audioText = entity.getAudioText();
        if (audioText != null) {
            stmt.bindString(4, audioText);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBuserinfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsRecoder());
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(3, audio);
        }
 
        String audioText = entity.getAudioText();
        if (audioText != null) {
            stmt.bindString(4, audioText);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBuserinfo readEntity(Cursor cursor, int offset) {
        DBuserinfo entity = new DBuserinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // isRecoder
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // audio
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // audioText
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBuserinfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsRecoder(cursor.getInt(offset + 1));
        entity.setAudio(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAudioText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBuserinfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBuserinfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBuserinfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
